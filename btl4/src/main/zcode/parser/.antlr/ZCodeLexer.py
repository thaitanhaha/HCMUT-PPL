# Generated from c://Users//hp450//Desktop//btl4//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,45,375,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,1,0,1,0,1,1,1,1,1,2,1,2,1,2,1,2,3,2,116,8,2,1,3,1,3,1,3,
        1,4,4,4,122,8,4,11,4,12,4,123,1,5,1,5,5,5,128,8,5,10,5,12,5,131,
        9,5,1,6,1,6,3,6,135,8,6,1,6,4,6,138,8,6,11,6,12,6,139,1,7,1,7,3,
        7,144,8,7,1,7,3,7,147,8,7,1,8,1,8,3,8,151,8,8,1,9,1,9,5,9,155,8,
        9,10,9,12,9,158,9,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,
        13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,
        15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,
        17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,
        20,1,20,1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,
        22,1,22,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,
        24,1,25,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,26,1,27,1,27,1,
        27,1,27,1,27,1,27,1,28,1,28,1,28,1,28,1,29,1,29,1,29,1,29,1,30,1,
        30,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
        35,1,36,1,36,1,37,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,
        41,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,1,43,3,
        43,312,8,43,1,44,1,44,1,44,1,44,1,45,1,45,1,46,1,46,1,46,1,46,5,
        46,324,8,46,10,46,12,46,327,9,46,1,46,1,46,1,47,4,47,332,8,47,11,
        47,12,47,333,1,47,1,47,1,48,1,48,1,48,5,48,341,8,48,10,48,12,48,
        344,9,48,1,49,1,49,1,49,1,50,1,50,5,50,351,8,50,10,50,12,50,354,
        9,50,1,50,1,50,1,50,3,50,359,8,50,1,50,1,50,1,51,1,51,1,51,1,52,
        1,52,5,52,368,8,52,10,52,12,52,371,9,52,1,52,1,52,1,52,0,0,53,1,
        0,3,0,5,0,7,0,9,0,11,0,13,0,15,1,17,2,19,3,21,4,23,5,25,6,27,7,29,
        8,31,9,33,10,35,11,37,12,39,13,41,14,43,15,45,16,47,17,49,18,51,
        19,53,20,55,21,57,22,59,23,61,24,63,25,65,26,67,27,69,28,71,29,73,
        30,75,31,77,32,79,33,81,34,83,35,85,36,87,37,89,38,91,39,93,40,95,
        41,97,42,99,43,101,44,103,0,105,45,1,0,12,3,0,65,90,95,95,97,122,
        1,0,48,57,4,0,10,10,13,13,34,34,92,92,1,0,39,39,1,0,34,34,7,0,39,
        39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,69,69,101,101,
        2,0,43,43,45,45,2,0,60,60,62,62,1,0,10,10,3,0,8,9,12,13,32,32,1,
        1,10,10,388,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,
        0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,
        0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,
        0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,
        0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,
        0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,
        0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,
        0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,
        0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,
        0,0,105,1,0,0,0,1,107,1,0,0,0,3,109,1,0,0,0,5,115,1,0,0,0,7,117,
        1,0,0,0,9,121,1,0,0,0,11,125,1,0,0,0,13,132,1,0,0,0,15,141,1,0,0,
        0,17,150,1,0,0,0,19,152,1,0,0,0,21,162,1,0,0,0,23,167,1,0,0,0,25,
        173,1,0,0,0,27,180,1,0,0,0,29,185,1,0,0,0,31,192,1,0,0,0,33,199,
        1,0,0,0,35,203,1,0,0,0,37,211,1,0,0,0,39,216,1,0,0,0,41,220,1,0,
        0,0,43,226,1,0,0,0,45,229,1,0,0,0,47,235,1,0,0,0,49,244,1,0,0,0,
        51,247,1,0,0,0,53,252,1,0,0,0,55,257,1,0,0,0,57,263,1,0,0,0,59,267,
        1,0,0,0,61,271,1,0,0,0,63,275,1,0,0,0,65,278,1,0,0,0,67,280,1,0,
        0,0,69,282,1,0,0,0,71,284,1,0,0,0,73,286,1,0,0,0,75,288,1,0,0,0,
        77,291,1,0,0,0,79,293,1,0,0,0,81,295,1,0,0,0,83,297,1,0,0,0,85,299,
        1,0,0,0,87,311,1,0,0,0,89,313,1,0,0,0,91,317,1,0,0,0,93,319,1,0,
        0,0,95,331,1,0,0,0,97,337,1,0,0,0,99,345,1,0,0,0,101,348,1,0,0,0,
        103,362,1,0,0,0,105,365,1,0,0,0,107,108,7,0,0,0,108,2,1,0,0,0,109,
        110,7,1,0,0,110,4,1,0,0,0,111,116,8,2,0,0,112,116,3,7,3,0,113,114,
        7,3,0,0,114,116,7,4,0,0,115,111,1,0,0,0,115,112,1,0,0,0,115,113,
        1,0,0,0,116,6,1,0,0,0,117,118,5,92,0,0,118,119,7,5,0,0,119,8,1,0,
        0,0,120,122,3,3,1,0,121,120,1,0,0,0,122,123,1,0,0,0,123,121,1,0,
        0,0,123,124,1,0,0,0,124,10,1,0,0,0,125,129,5,46,0,0,126,128,3,3,
        1,0,127,126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,
        0,0,130,12,1,0,0,0,131,129,1,0,0,0,132,134,7,6,0,0,133,135,7,7,0,
        0,134,133,1,0,0,0,134,135,1,0,0,0,135,137,1,0,0,0,136,138,3,3,1,
        0,137,136,1,0,0,0,138,139,1,0,0,0,139,137,1,0,0,0,139,140,1,0,0,
        0,140,14,1,0,0,0,141,143,3,9,4,0,142,144,3,11,5,0,143,142,1,0,0,
        0,143,144,1,0,0,0,144,146,1,0,0,0,145,147,3,13,6,0,146,145,1,0,0,
        0,146,147,1,0,0,0,147,16,1,0,0,0,148,151,3,21,10,0,149,151,3,23,
        11,0,150,148,1,0,0,0,150,149,1,0,0,0,151,18,1,0,0,0,152,156,5,34,
        0,0,153,155,3,5,2,0,154,153,1,0,0,0,155,158,1,0,0,0,156,154,1,0,
        0,0,156,157,1,0,0,0,157,159,1,0,0,0,158,156,1,0,0,0,159,160,5,34,
        0,0,160,161,6,9,0,0,161,20,1,0,0,0,162,163,5,116,0,0,163,164,5,114,
        0,0,164,165,5,117,0,0,165,166,5,101,0,0,166,22,1,0,0,0,167,168,5,
        102,0,0,168,169,5,97,0,0,169,170,5,108,0,0,170,171,5,115,0,0,171,
        172,5,101,0,0,172,24,1,0,0,0,173,174,5,110,0,0,174,175,5,117,0,0,
        175,176,5,109,0,0,176,177,5,98,0,0,177,178,5,101,0,0,178,179,5,114,
        0,0,179,26,1,0,0,0,180,181,5,98,0,0,181,182,5,111,0,0,182,183,5,
        111,0,0,183,184,5,108,0,0,184,28,1,0,0,0,185,186,5,115,0,0,186,187,
        5,116,0,0,187,188,5,114,0,0,188,189,5,105,0,0,189,190,5,110,0,0,
        190,191,5,103,0,0,191,30,1,0,0,0,192,193,5,114,0,0,193,194,5,101,
        0,0,194,195,5,116,0,0,195,196,5,117,0,0,196,197,5,114,0,0,197,198,
        5,110,0,0,198,32,1,0,0,0,199,200,5,118,0,0,200,201,5,97,0,0,201,
        202,5,114,0,0,202,34,1,0,0,0,203,204,5,100,0,0,204,205,5,121,0,0,
        205,206,5,110,0,0,206,207,5,97,0,0,207,208,5,109,0,0,208,209,5,105,
        0,0,209,210,5,99,0,0,210,36,1,0,0,0,211,212,5,102,0,0,212,213,5,
        117,0,0,213,214,5,110,0,0,214,215,5,99,0,0,215,38,1,0,0,0,216,217,
        5,102,0,0,217,218,5,111,0,0,218,219,5,114,0,0,219,40,1,0,0,0,220,
        221,5,117,0,0,221,222,5,110,0,0,222,223,5,116,0,0,223,224,5,105,
        0,0,224,225,5,108,0,0,225,42,1,0,0,0,226,227,5,98,0,0,227,228,5,
        121,0,0,228,44,1,0,0,0,229,230,5,98,0,0,230,231,5,114,0,0,231,232,
        5,101,0,0,232,233,5,97,0,0,233,234,5,107,0,0,234,46,1,0,0,0,235,
        236,5,99,0,0,236,237,5,111,0,0,237,238,5,110,0,0,238,239,5,116,0,
        0,239,240,5,105,0,0,240,241,5,110,0,0,241,242,5,117,0,0,242,243,
        5,101,0,0,243,48,1,0,0,0,244,245,5,105,0,0,245,246,5,102,0,0,246,
        50,1,0,0,0,247,248,5,101,0,0,248,249,5,108,0,0,249,250,5,115,0,0,
        250,251,5,101,0,0,251,52,1,0,0,0,252,253,5,101,0,0,253,254,5,108,
        0,0,254,255,5,105,0,0,255,256,5,102,0,0,256,54,1,0,0,0,257,258,5,
        98,0,0,258,259,5,101,0,0,259,260,5,103,0,0,260,261,5,105,0,0,261,
        262,5,110,0,0,262,56,1,0,0,0,263,264,5,101,0,0,264,265,5,110,0,0,
        265,266,5,100,0,0,266,58,1,0,0,0,267,268,5,110,0,0,268,269,5,111,
        0,0,269,270,5,116,0,0,270,60,1,0,0,0,271,272,5,97,0,0,272,273,5,
        110,0,0,273,274,5,100,0,0,274,62,1,0,0,0,275,276,5,111,0,0,276,277,
        5,114,0,0,277,64,1,0,0,0,278,279,5,43,0,0,279,66,1,0,0,0,280,281,
        5,45,0,0,281,68,1,0,0,0,282,283,5,42,0,0,283,70,1,0,0,0,284,285,
        5,47,0,0,285,72,1,0,0,0,286,287,5,37,0,0,287,74,1,0,0,0,288,289,
        5,60,0,0,289,290,5,45,0,0,290,76,1,0,0,0,291,292,5,40,0,0,292,78,
        1,0,0,0,293,294,5,41,0,0,294,80,1,0,0,0,295,296,5,91,0,0,296,82,
        1,0,0,0,297,298,5,93,0,0,298,84,1,0,0,0,299,300,5,44,0,0,300,86,
        1,0,0,0,301,302,5,61,0,0,302,312,5,61,0,0,303,304,5,33,0,0,304,312,
        5,61,0,0,305,312,7,8,0,0,306,307,5,60,0,0,307,312,5,61,0,0,308,309,
        5,62,0,0,309,312,5,61,0,0,310,312,5,61,0,0,311,301,1,0,0,0,311,303,
        1,0,0,0,311,305,1,0,0,0,311,306,1,0,0,0,311,308,1,0,0,0,311,310,
        1,0,0,0,312,88,1,0,0,0,313,314,5,46,0,0,314,315,5,46,0,0,315,316,
        5,46,0,0,316,90,1,0,0,0,317,318,5,10,0,0,318,92,1,0,0,0,319,320,
        5,35,0,0,320,321,5,35,0,0,321,325,1,0,0,0,322,324,8,9,0,0,323,322,
        1,0,0,0,324,327,1,0,0,0,325,323,1,0,0,0,325,326,1,0,0,0,326,328,
        1,0,0,0,327,325,1,0,0,0,328,329,6,46,1,0,329,94,1,0,0,0,330,332,
        7,10,0,0,331,330,1,0,0,0,332,333,1,0,0,0,333,331,1,0,0,0,333,334,
        1,0,0,0,334,335,1,0,0,0,335,336,6,47,1,0,336,96,1,0,0,0,337,342,
        3,1,0,0,338,341,3,1,0,0,339,341,3,3,1,0,340,338,1,0,0,0,340,339,
        1,0,0,0,341,344,1,0,0,0,342,340,1,0,0,0,342,343,1,0,0,0,343,98,1,
        0,0,0,344,342,1,0,0,0,345,346,9,0,0,0,346,347,6,49,2,0,347,100,1,
        0,0,0,348,352,5,34,0,0,349,351,3,5,2,0,350,349,1,0,0,0,351,354,1,
        0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,358,1,0,0,0,354,352,1,
        0,0,0,355,356,5,13,0,0,356,359,5,10,0,0,357,359,7,11,0,0,358,355,
        1,0,0,0,358,357,1,0,0,0,359,360,1,0,0,0,360,361,6,50,3,0,361,102,
        1,0,0,0,362,363,5,92,0,0,363,364,8,5,0,0,364,104,1,0,0,0,365,369,
        5,34,0,0,366,368,3,5,2,0,367,366,1,0,0,0,368,371,1,0,0,0,369,367,
        1,0,0,0,369,370,1,0,0,0,370,372,1,0,0,0,371,369,1,0,0,0,372,373,
        3,103,51,0,373,374,6,52,4,0,374,106,1,0,0,0,18,0,115,123,129,134,
        139,143,146,150,156,311,325,333,340,342,352,358,369,5,1,9,0,6,0,
        0,1,49,1,1,50,2,1,52,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBERLIT = 1
    BOOLLIT = 2
    STRINGLIT = 3
    TRUE = 4
    FALSE = 5
    NUMBER = 6
    BOOL = 7
    STRING = 8
    RETURN = 9
    VAR = 10
    DYNAMIC = 11
    FUNC = 12
    FOR = 13
    UNTIL = 14
    BY = 15
    BREAK = 16
    CONTINUE = 17
    IF = 18
    ELSE = 19
    ELIF = 20
    BEGIN = 21
    END = 22
    NOT = 23
    AND = 24
    OR = 25
    ADD = 26
    SUB = 27
    MUL = 28
    DIV = 29
    MOD = 30
    ASSIGN = 31
    LP = 32
    RP = 33
    LS = 34
    RS = 35
    COMMA = 36
    RELOP = 37
    CONCAT = 38
    NEWLINE = 39
    CMT = 40
    WS = 41
    IDENTIFIER = 42
    ERROR_CHAR = 43
    UNCLOSE_STRING = 44
    ILLEGAL_ESCAPE = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'not'", "'and'", "'or'", "'+'", "'-'", "'*'", "'/'", 
            "'%'", "'<-'", "'('", "')'", "'['", "']'", "','", "'...'", "'\\n'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBERLIT", "BOOLLIT", "STRINGLIT", "TRUE", "FALSE", "NUMBER", 
            "BOOL", "STRING", "RETURN", "VAR", "DYNAMIC", "FUNC", "FOR", 
            "UNTIL", "BY", "BREAK", "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", 
            "END", "NOT", "AND", "OR", "ADD", "SUB", "MUL", "DIV", "MOD", 
            "ASSIGN", "LP", "RP", "LS", "RS", "COMMA", "RELOP", "CONCAT", 
            "NEWLINE", "CMT", "WS", "IDENTIFIER", "ERROR_CHAR", "UNCLOSE_STRING", 
            "ILLEGAL_ESCAPE" ]

    ruleNames = [ "LETTER", "DIGIT", "CHAR", "ESCSEQ", "INTPART", "DECPART", 
                  "EXPART", "NUMBERLIT", "BOOLLIT", "STRINGLIT", "TRUE", 
                  "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
                  "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
                  "IF", "ELSE", "ELIF", "BEGIN", "END", "NOT", "AND", "OR", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "ASSIGN", "LP", "RP", 
                  "LS", "RS", "COMMA", "RELOP", "CONCAT", "NEWLINE", "CMT", 
                  "WS", "IDENTIFIER", "ERROR_CHAR", "UNCLOSE_STRING", "ILLEGAL_ESCSEQ", 
                  "ILLEGAL_ESCAPE" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[9] = self.STRINGLIT_action 
            actions[49] = self.ERROR_CHAR_action 
            actions[50] = self.UNCLOSE_STRING_action 
            actions[52] = self.ILLEGAL_ESCAPE_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STRINGLIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            raise ErrorToken(self.text)
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:

            	if (len(self.text) >= 2 and self.text[-2] == '\r' and self.text[-1] == '\n'):
                      raise UncloseString(self.text[1:-2])
            	elif (self.text[-1] == '\n'):
            		raise UncloseString(self.text[1:-1])
            	else:
                      raise UncloseString(self.text[1:])

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise IllegalEscape(self.text[1:])
     


